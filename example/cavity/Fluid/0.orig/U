FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    location    "0";
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

internalField   uniform (1e-10 0 0);

boundaryField
{

    inlet
    {
        name            oscillatingLinearInlet;
        type            codedFixedValue;
        value           uniform (0 0 0);
        code            #{
            const vector axis(0, 1, 0);
            vectorField v(this->patch().Cf().size());
            scalar t(this->db().time().value());
            forAll(this->patch().Cf(),patchid){
                vector vi((this->patch().Cf()[patchid].y()-0.875)/0.125*(1.0-cos(2.0*3.14159*t/5.0)),0,0);
                v[patchid] = vi;
            }
            operator==(v);
        #};
    }

    movingWall
    {
        name            oscillatingFixedInlet;
        type            codedFixedValue;
        value           uniform (0 0 0);
        code            #{
            const vector axis(0, 1, 0);
            vectorField v(this->patch().Cf().size());
            scalar t(this->db().time().value());
            vector vi(1.0-cos(2.0*3.14159*t/5.0),0,0);
            forAll(this->patch().Cf(),patchid){
                v[patchid] = vi;
            }
            operator==(v);
        #};
    }

    bottomWall
    {
        type            movingWallVelocity;
        value           uniform (0 0 0);
    }

    fixedWalls
    {
        type            fixedValue;
        value           uniform (0 0 0);
    }

    outlet
    {
        type            zeroGradient;
    }

    // frontAndBack
    // {
    //     type            symmetry;
    // }

}

// ************************************************************************* //
